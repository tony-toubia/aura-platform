// packages/database/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  email                  String                   @unique
  name                   String?
  passwordHash           String
  subscription           Subscription?
  auras                  Aura[]
  notificationPreferences NotificationPreference[]
  pushSubscriptions      PushSubscription[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Subscription {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  user                    User      @relation(fields: [userId], references: [id])
  tier                    Tier      @default(FREE)
  status                  Status    @default(ACTIVE)
  expiresAt               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Stripe fields
  stripeCustomerId        String?   @unique
  stripeSubscriptionId    String?   @unique
  stripePriceId           String?
  stripeCurrentPeriodEnd  DateTime?

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Aura {
  id                    String         @id @default(cuid())
  userId                String
  user                  User           @relation(fields: [userId], references: [id])
  name                  String
  vesselType            VesselType
  vesselCode            String?        // For specific vessel variants
  plantType             String?        // For terra vessels
  personality           Json           // Stores trait values
  communicationStyle    String
  voiceProfile          String
  enabled               Boolean        @default(true)
  avatar                String?        // Avatar URL or emoji
  selectedStudyId       String?        // For wildlife tracking
  selectedIndividualId  String?        // For specific individual tracking
  locationConfigs       Json?          // Location configurations for senses
  proactiveEnabled      Boolean        @default(true)
  lastEvaluationAt      DateTime?
  senses                AuraSense[]
  rules                 BehaviorRule[]
  knowledge             Knowledge[]
  conversations         Conversation[]
  analytics             Analytics?
  proactiveMessages     ProactiveMessage[]
  ruleExecutionLogs     RuleExecutionLog[]
  notificationPreferences NotificationPreference[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  
  @@index([userId])
  @@map("auras")
}

model Sense {
  id          String      @id @default(cuid())
  code        String      @unique // e.g., "weather_openweather"
  name        String
  category    String
  tier        SenseTier
  config      Json        // Default configuration
  auraSenses  AuraSense[]
  createdAt   DateTime    @default(now())
}

model AuraSense {
  id        String   @id @default(cuid())
  auraId    String
  aura      Aura     @relation(fields: [auraId], references: [id])
  senseId   String
  sense     Sense    @relation(fields: [senseId], references: [id])
  config    Json     // Aura-specific configuration
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@unique([auraId, senseId])
}

model BehaviorRule {
  id                    String   @id @default(cuid())
  auraId                String
  aura                  Aura     @relation(fields: [auraId], references: [id])
  name                  String
  trigger               Json     // Trigger conditions
  action                Json     // Action configuration
  priority              Int      @default(0)
  enabled               Boolean  @default(true)
  lastTriggeredAt       DateTime?
  triggerCount          Int      @default(0)
  notificationTemplate  String?
  notificationChannels  String[] @default(["in_app"])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  proactiveMessages     ProactiveMessage[]
  ruleExecutionLogs     RuleExecutionLog[]
}

model Conversation {
  id                     String             @id @default(cuid())
  auraId                 String
  aura                   Aura               @relation(fields: [auraId], references: [id])
  sessionId              String             @unique
  messages               Message[]
  proactiveMessages      ProactiveMessage[]
  context                Json?
  hasUnreadProactive     Boolean            @default(false)
  unreadProactiveCount   Int                @default(0)
  startedAt              DateTime           @default(now())
  endedAt                DateTime?
  
  @@index([auraId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  role           MessageRole
  content        String
  metadata       Json?        // Includes influence factors
  createdAt      DateTime     @default(now())
  
  @@index([conversationId])
}

model Knowledge {
  id        String   @id @default(cuid())
  auraId    String
  aura      Aura     @relation(fields: [auraId], references: [id])
  source    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id        String   @id @default(cuid())
  auraId    String   @unique
  aura      Aura     @relation(fields: [auraId], references: [id])
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Proactive Notifications Models

model ProactiveMessage {
  id              String                    @id @default(cuid())
  auraId          String
  aura            Aura                      @relation(fields: [auraId], references: [id], onDelete: Cascade)
  ruleId          String?
  rule            BehaviorRule?             @relation(fields: [ruleId], references: [id], onDelete: SetNull)
  conversationId  String
  conversation    Conversation              @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message         String
  triggerData     Json                      // Sensor values that triggered the rule
  metadata        Json                      @default("{}")
  createdAt       DateTime                  @default(now())
  deliveredAt     DateTime?
  readAt          DateTime?
  status          NotificationStatus        @default(PENDING)
  deliveryChannel NotificationChannel       @default(IN_APP)
  retryCount      Int                       @default(0)
  errorMessage    String?
  deliveryLogs    NotificationDeliveryLog[]
  
  @@index([auraId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("proactive_messages")
}

model RuleExecutionLog {
  id                String            @id @default(cuid())
  ruleId            String
  rule              BehaviorRule      @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  auraId            String
  aura              Aura              @relation(fields: [auraId], references: [id], onDelete: Cascade)
  executedAt        DateTime          @default(now())
  triggered         Boolean           @default(false)
  sensorValues      Json
  evaluationResult  Json?             // Details about why rule did/didn't trigger
  notificationSent  Boolean           @default(false)
  notificationId    String?
  notification      ProactiveMessage? @relation(fields: [notificationId], references: [id])
  executionTimeMs   Int?              // Performance tracking
  
  @@index([ruleId])
  @@index([auraId])
  @@index([executedAt(sort: Desc)])
  @@map("rule_execution_log")
}

model NotificationPreference {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  auraId            String?             // NULL means global preference
  aura              Aura?               @relation(fields: [auraId], references: [id], onDelete: Cascade)
  channel           NotificationChannel
  enabled           Boolean             @default(true)
  quietHoursEnabled Boolean             @default(false)
  quietHoursStart   String?             // Time format: HH:MM
  quietHoursEnd     String?             // Time format: HH:MM
  timezone          String              @default("UTC")
  maxPerDay         Int?                // Rate limiting per channel
  priorityThreshold Int                 @default(5)
  metadata          Json                @default("{}")  // Channel-specific settings
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@unique([userId, auraId, channel])
  @@index([userId])
  @@map("notification_preferences")
}

model NotificationDeliveryLog {
  id             String            @id @default(cuid())
  notificationId String
  notification   ProactiveMessage  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  channel        NotificationChannel
  attemptedAt    DateTime          @default(now())
  deliveredAt    DateTime?
  failedAt       DateTime?
  errorMessage   String?
  externalId     String?           // ID from external service
  metadata       Json              @default("{}")
  
  @@index([notificationId])
  @@map("notification_delivery_log")
}

model PushSubscription {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint     String    @unique
  keys         Json      // p256dh and auth keys
  userAgent    String?
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?
  
  @@index([userId])
  @@map("push_subscriptions")
}

model BackgroundJob {
  id          String          @id @default(cuid())
  jobType     String
  status      BackgroundJobStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  errorMessage String?
  metadata    Json            @default("{}")
  createdAt   DateTime        @default(now())
  
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("background_jobs")
}

// Update User model to include new relations (done above)

// Enums
enum Tier {
  FREE
  PERSONAL
  FAMILY
  BUSINESS
}

enum Status {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum VesselType {
  DIGITAL
  TERRA
  COMPANION
  MEMORY
  SAGE
  CUSTOM
}

enum SenseTier {
  FREE
  VESSEL
  PREMIUM
  ENTERPRISE
}

enum MessageRole {
  USER
  AURA
  SYSTEM
}

enum NotificationStatus {
  PENDING
  QUEUED
  DELIVERED
  READ
  FAILED
  EXPIRED
}

enum NotificationChannel {
  IN_APP
  WEB_PUSH
  SMS
  WHATSAPP
  EMAIL
}

enum BackgroundJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
